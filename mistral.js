const axios = require('axios');
require("dotenv").config({ path: './clef.env' });

async function generateNotes(input, flashcardCount = 20, qcmCount = 15, pdfImages = []) {
  // V√©rifier la taille de l'entr√©e et renvoyer une erreur si elle est trop grande
  const maxInputLength = 100000; // ~25K tokens
  if (input.length > 400000) {
    return {
      error: "Le texte source est trop volumineux pour √™tre trait√© (plus de 400 000 caract√®res). Veuillez r√©duire la taille du texte.",
      details: { inputLength: input.length, maxRecommended: 400000 }
    };
  }
  
  let truncatedInput = input;
  if (input.length > maxInputLength) {
    console.warn(`Input trop long (${input.length} caract√®res), troncature √† ${maxInputLength} caract√®res.`);
    truncatedInput = input.substring(0, maxInputLength);
    // Couper √† la fin d'une phrase compl√®te pour plus de coh√©rence
    const lastPeriod = truncatedInput.lastIndexOf('.');
    if (lastPeriod > maxInputLength * 0.8) {
      truncatedInput = truncatedInput.substring(0, lastPeriod + 1);
    }
  }

  // Indiquer au mod√®le qu'il y a des images disponibles, mais sans inclure les URLs
  const imageInfo = pdfImages.length > 0 
    ? `\n\nINFORMATION: ${pdfImages.length} images ont √©t√© extraites du document. Ces images seront ajout√©es apr√®s la g√©n√©ration.`
    : '';

  const prompt = `
Tu es un assistant sp√©cialis√© dans la cr√©ation de fiches de r√©vision d√©taill√©es et visuelles. Voici un contenu √† transformer en mat√©riel d'√©tude complet:

"${truncatedInput}"

IMPORTANT: Tu dois produire EXACTEMENT ${flashcardCount} flashcards, ni plus ni moins. C'est une exigence absolue.

Cr√©e:
1. EXACTEMENT ${flashcardCount} flashcards avec une question au recto et la r√©ponse au verso.
2. ${qcmCount} questions QCM, chacune ayant 4 options et une seule r√©ponse correcte.
3. Une fiche de r√©vision D√âTAILL√âE du contenu (1-2 pages compl√®tes), incluant:
   - Un titre accrocheur avec emoji
   - Une introduction/pr√©sentation du sujet (2-3 paragraphes)
   - Un r√©sum√© structur√© des concepts principaux
   - Une section "D√©finitions cl√©s" avec au moins 5-10 termes importants
   - Une section "M√©thodologie" ou "√âtapes" si applicable
   - Des exemples concrets illustrant les concepts
   - Une section "Applications pratiques"
   - Des points √† retenir absolument (5-10 points essentiels)
   - Une conclusion qui synth√©tise les id√©es principales (1-2 paragraphes)
   ${imageInfo}

INSTRUCTIONS IMPORTANTES:
- Utilise des √©mojis pertinents si tu en as un dans le contexte dans les titres de sections et les points cl√©s (üîë, üìù, üìä, üîç, üß†, etc.)
- Formate le texte avec des titres, sous-titres, listes √† puces, tableaux si pertinent
- Structure ta fiche de r√©vision comme un vrai document p√©dagogique, pas comme une simple liste
- Inclus des conseils m√©thodologiques concrets pour r√©viser le sujet efficacement


Formate ta r√©ponse en JSON avec cette structure exacte:
{
  "flashcards": [
    {"question": "Question 1?", "answer": "R√©ponse 1", "image": ""}
  ],
  "qcm": [
    {
      "question": "Question 1?",
      "options": ["Option A", "Option B", "Option C", "Option D"],
      "correct": 0
    }
  ],
  "revision": {
    "title": "Titre complet du sujet avec emoji",
    "introduction": "Paragraphes d'introduction expliquant le contexte et l'importance du sujet",
    "summary": "R√©sum√© d√©taill√© des concepts principaux avec une introduction sur le projet",
    "definitions": [
      {"term": "Terme 1", "definition": "D√©finition d√©taill√©e 1"},
      {"term": "Terme 2", "definition": "D√©finition d√©taill√©e 2"}
    ],
    "methodology": "Description des m√©thodologies ou processus li√©s au sujet",
    "examples": ["Exemple d√©taill√© 1", "Exemple d√©taill√© 2"],
    "practical_applications": "Comment appliquer ces connaissances dans la pratique",
    "key_points": ["Point cl√© 1 üîë", "Point cl√© 2 üîë"],
    "must_know": ["√âl√©ment essentiel 1 üåü", "√âl√©ment essentiel 2 üåü"],
    "conclusion": "Synth√®se finale et ouverture",
    "tips": ["Conseil de r√©vision 1", "Conseil de r√©vision 2"],
    "structure": ["Section 1", "Section 2"],
    "images": []
  }
}

Avant d'envoyer ta r√©ponse, v√©rifie que ton tableau de flashcards contient bien ${flashcardCount} √©l√©ments et que ta fiche de r√©vision est vraiment d√©taill√©e et structur√©e comme un document p√©dagogique complet.
`;

  // Param√®tres pour l'API
  const apiParams = {
    model: "mistral-large-latest",
    messages: [
      {
        role: "system",
        content: "Tu es un assistant √©ducatif expert qui cr√©e des fiches de r√©vision d√©taill√©es, structur√©es et visuelles. Tu utilises abondamment des √©mojis pour rendre le contenu attractif et tu organises l'information comme un vrai professeur le ferait. Tu suis scrupuleusement les instructions concernant le nombre d'√©l√©ments √† g√©n√©rer."
      },
      { role: "user", content: prompt }
    ],
    temperature: 0.1,
    max_tokens: 24000,
    response_format: { type: "json_object" }
  };

  try {
    // Tentative avec le mod√®le principal
    console.log("Tentative de g√©n√©ration avec mistral-large-latest...");
    const response = await axios.post(
      "https://api.mistral.ai/v1/chat/completions",
      apiParams,
      {
        headers: {
          "Authorization": `Bearer ${process.env.MISTRAL_API_KEY}`,
          "Content-Type": "application/json"
        }
      }
    );

    const content = response.data?.choices?.[0]?.message?.content;
    if (!content) {
      throw new Error("R√©ponse vide ou incorrecte de l'API");
    }

    try {
      const parsedContent = JSON.parse(content);

      // V√©rification et compl√©tion des structures
      if (!parsedContent.revision.definitions) parsedContent.revision.definitions = [];
      if (!parsedContent.revision.methodology) parsedContent.revision.methodology = "";
      if (!parsedContent.revision.examples) parsedContent.revision.examples = [];
      if (!parsedContent.revision.practical_applications) parsedContent.revision.practical_applications = "";
      if (!parsedContent.revision.must_know) parsedContent.revision.must_know = [];
      if (!parsedContent.revision.tips) parsedContent.revision.tips = [];
      if (!parsedContent.revision.structure) parsedContent.revision.structure = [];
      if (!parsedContent.revision.conclusion) parsedContent.revision.conclusion = "";
      
      // Ajouter les images du PDF APR√àS la g√©n√©ration du contenu
      if (pdfImages.length > 0) {
        // Ajouter les images √† la fiche de r√©vision
        parsedContent.revision.images = pdfImages;
        
        // Ajouter des images √† certaines flashcards (max 30% des flashcards)
        const maxFlashcardsWithImages = Math.min(Math.floor(parsedContent.flashcards.length * 0.3), pdfImages.length);
        for (let i = 0; i < maxFlashcardsWithImages; i++) {
          parsedContent.flashcards[i].image = pdfImages[i % pdfImages.length];
        }
        
        // Ajouter une note mentionnant que les images ont √©t√© ajout√©es automatiquement
        if (!parsedContent.revision.introduction.includes("images ont √©t√© ajout√©es automatiquement")) {
          parsedContent.revision.introduction = 
            "Note: Des images extraites du document ont √©t√© ajout√©es automatiquement √† cette fiche. \n\n" + 
            parsedContent.revision.introduction;
        }
      }

      console.log(`Nombre de flashcards re√ßues: ${parsedContent.flashcards?.length || 0}`);

      if (parsedContent.flashcards.length < flashcardCount) {
        console.warn(`Le mod√®le n'a g√©n√©r√© que ${parsedContent.flashcards.length} flashcards au lieu des ${flashcardCount} demand√©es.`);
        
        // Compl√©ter les flashcards manquantes
        while (parsedContent.flashcards.length < flashcardCount) {
          parsedContent.flashcards.push({
            question: `Question suppl√©mentaire ${parsedContent.flashcards.length + 1}?`,
            answer: "R√©ponse g√©n√©r√©e automatiquement pour compl√©ter le nombre requis.",
            image: ""
          });
        }
      }

      return parsedContent;

    } catch (parseError) {
      console.error("Erreur lors du parsing JSON:", parseError);
      return { error: "Format de r√©ponse incorrect", details: parseError.message };
    }

  } catch (error) {
    console.error('Erreur lors de l\'appel API Mistral:',
      error.response ? `Statut: ${error.response.status}, Donn√©es: ${JSON.stringify(error.response.data)}` : error.message
    );
    
    // Si l'erreur est li√©e √† la taille du contexte, renvoyer une erreur claire
    if (error.response && 
        error.response.data && 
        (error.response.data.message?.includes("too large for model") || 
         error.response.status === 400)) {
      
      return {
        error: "Le texte source est trop volumineux pour √™tre trait√© par l'API Mistral. Veuillez r√©duire la taille du texte ou le diviser en plusieurs parties.",
        details: error.response.data
      };
    }
    
    // Pour toute autre erreur, renvoyer un message d'erreur g√©n√©rique
    return {
      error: "Erreur lors de la g√©n√©ration des notes. Veuillez r√©essayer.",
      details: error.response ? error.response.data : error.message
    };
  }
}

// Fonction de test
async function testGeneration() {
  const sampleText = "Le HTML (HyperText Markup Language) est le langage de balisage standard pour cr√©er des pages web. CSS (Cascading Style Sheets) est utilis√© pour d√©finir le style des pages web. JavaScript est un langage de programmation qui permet d'ajouter de l'interactivit√© aux sites web.";

  const result = await generateNotes(sampleText, 20, 10);
  console.log(JSON.stringify(result, null, 2));
  console.log(`Nombre de flashcards: ${result.flashcards?.length || 0}`);
  console.log(`Nombre de QCM: ${result.qcm?.length || 0}`);
}

// D√©commentez pour tester
// testGeneration();

module.exports = { generateNotes };